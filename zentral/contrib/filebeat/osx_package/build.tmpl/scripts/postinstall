#!/usr/bin/python
from __future__ import print_function
import json
import os
import plistlib
import shutil
import ssl
import subprocess
import tempfile
import urllib2


START_ENROLLMENT_URL = "https://%TLS_HOSTNAME%/filebeat/enrollment/start/"
COMPLETE_ENROLLMENT_URL = "https://%TLS_HOSTNAME_FOR_CLIENT_CERT_AUTH%/filebeat/enrollment/complete/"
ENROLLMENT_SECRET = "%ENROLLMENT_SECRET%"
TLS_SERVER_CERTS = "%TLS_SERVER_CERTS%"
DEFAULT_HEADERS = {
    "User-Agent": "Zentral/filebeatenrollment 0.1",
    "Content-Type": "application/json"
}

ZENTRAL_DIR = "/usr/local/zentral/"
FILEBEAT_HOME = os.path.join(ZENTRAL_DIR, "filebeat")
FILEBEAT_YML = os.path.join(FILEBEAT_HOME, "filebeat.yml")
OPENSSL = "/usr/bin/openssl"
SCEPCLIENT = os.path.join(ZENTRAL_DIR, "bin", "scepclient")


def get_serial_number_and_uuid():
    output = subprocess.check_output(["ioreg", "-a", "-c", "IOPlatformExpertDevice", "-d", "2"])
    ioreg_result = plistlib.readPlistFromString(output)["IORegistryEntryChildren"][0]
    return ioreg_result["IOPlatformSerialNumber"], ioreg_result["IOPlatformUUID"]


def get_ssl_context(client_cert=None, client_key=None):
    ctx = ssl.create_default_context(cafile=TLS_SERVER_CERTS or None)
    if client_cert:
        ctx.load_cert_chain(client_cert, client_key)
    return ctx


def get_certificate_and_key_paths():
    return os.path.join(FILEBEAT_HOME, "client.crt"), os.path.join(FILEBEAT_HOME, "client.key")


def get_post_data(secret, serial_number, uuid):
    client_cert, client_key = get_certificate_and_key_paths()
    return json.dumps({"secret": secret,
                       "serial_number": serial_number,
                       "uuid": uuid,
                       "certificate": client_cert,
                       "key": client_key,
                       "certificate_authority": TLS_SERVER_CERTS or None})


def start_enrollment(serial_number, uuid):
    print("START ENROLLMENT", ENROLLMENT_SECRET)
    req = urllib2.Request(START_ENROLLMENT_URL,
                          get_post_data(ENROLLMENT_SECRET, serial_number, uuid),
                          DEFAULT_HEADERS)
    resp = urllib2.urlopen(req, context=get_ssl_context())
    return json.load(resp)


def build_csr(tmpdir, serial_number, cn, org, challenge):
    pkcs8_key = os.path.join(tmpdir, "client.key.pkcs8")
    cfg = {
        "req": {
            "default_bits": "2048",
            "default_md": "sha256",
            "default_keyfile": pkcs8_key,
            "encrypt_key": "no",
            "prompt": "no",
            "distinguished_name": "req_distinguished_name",
            "attributes": "req_attributes"
        },
        "req_distinguished_name": {
            "CN": cn.replace("$", "\$"),
            "O": org.replace("$", "\$"),
            "serialNumber": serial_number
        },
        "req_attributes": {
            "challengePassword": challenge,
        }
    }
    openssl_req_config = os.path.join(tmpdir, "openssl_req.cfg")
    with open(openssl_req_config, "w") as of:
        for section, section_body in cfg.items():
            of.write(f"[ {section} ]\n")
            for key, val in section_body.items():
                of.write(f"{key} = {val}\n")
    csr = os.path.join(tmpdir, "csr.pem")  # expected csr file for scepclient
    subprocess.check_call([
        OPENSSL,
        "req", "-new",
        "-config", openssl_req_config,
        "-out", csr
    ])
    # convert key to pkcs1 for scepclient
    subprocess.check_call([
        OPENSSL,
        "rsa",
        "-in", pkcs8_key,
        "-out", os.path.join(tmpdir, "client.key")
    ])


def get_certificate(serial_number, cn, org, challenge, url):
    print("GET CERTIFICATE", cn, org, challenge, url)
    if not os.path.isdir(FILEBEAT_HOME):
        os.makedirs(FILEBEAT_HOME)
    old_umask = os.umask(0o077)
    old_dir = os.getcwd()
    tmpdir = tempfile.mkdtemp()
    os.chdir(tmpdir)
    build_csr(tmpdir, serial_number, cn, org, challenge)
    subprocess.check_call([
        SCEPCLIENT,
        "-server-url", url,
        "-private-key", "client.key",
        "-certificate", "client.crt"
    ])
    client_cert, private_key = get_certificate_and_key_paths()
    shutil.move("client.crt", client_cert)
    shutil.move("client.key", private_key)
    os.chdir(old_dir)
    shutil.rmtree(tmpdir)
    os.umask(old_umask)
    return client_cert, private_key


def complete_enrollment(client_cert, client_key, enrollment_session_secret, serial_number, uuid):
    print("COMPLETE ENROLLMENT", client_cert, client_key, enrollment_session_secret)
    req = urllib2.Request(COMPLETE_ENROLLMENT_URL,
                          get_post_data(enrollment_session_secret, serial_number, uuid),
                          DEFAULT_HEADERS)
    resp = urllib2.urlopen(req, context=get_ssl_context(client_cert, client_key))
    resp_json = json.load(resp)
    with open(FILEBEAT_YML, "w") as f:
        f.write(resp_json["filebeat.yml"])


def load_launch_daemon():
    subprocess.check_call([
        "/bin/launchctl", "load", "-w",
        "/Library/LaunchDaemons/io.zentral.filebeat.plist"
    ])


def update_default_zentral_plist():
    subprocess.check_call([
        "/usr/bin/defaults", "write",
        "/Library/Preferences/io.zentral.plist",
        "base_url", "https://%TLS_HOSTNAME%"
    ])


if __name__ == "__main__":
    serial_number, uuid = get_serial_number_and_uuid()
    enrollment_session_data = start_enrollment(serial_number, uuid)
    client_cert, client_key = get_certificate(serial_number, **enrollment_session_data["scep"])
    complete_enrollment(client_cert, client_key, enrollment_session_data["secret"], serial_number, uuid)
    load_launch_daemon()
    update_default_zentral_plist()
